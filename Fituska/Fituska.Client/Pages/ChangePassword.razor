@page "/passwordchange"
@using Fituska.Shared.Models.User
@inject FituskaAuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject ILocalStorageService LocalStorageService
@inject LastPageStorageService LastPageStorageService

@if (userModel is not null)
{
    <h2>Změna hesla uživatele <em>@userModel.UserName</em></h2>

    @if (!passwdUpdateSuccess)
    {
        <EditForm Model="userModel" OnValidSubmit="PasswordUpdateAsync">
            <DataAnnotationsValidator />

            <div class="form-group my-3">
                <label for="oldpassword">Původní heslo:</label>
                <InputText id="oldpassword" type="password" class="form-control" @bind-Value="userModel.OldPassword" />
                <ValidationMessage For="@(() => userModel.OldPassword)" />
            </div>

            <div class="form-group my-3">
                <label for="password">Nové heslo:</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="userModel.Password" />
                <ValidationMessage For="@(() => userModel.Password)" />
            </div>

            <ValidationSummary />

            <button type="submit" class="btn btn-primary mb-3">Uložit</button>

            @if (passwdUpdateFailure)
            {
                <p class="my-3 text-danger">Změna hesla se nezdařila. Zkontroloujte zadané jméno a původní heslo.</p>
            }
        </EditForm>
    }
    else
    {
        <p class="my-3 text-success">Změna hesla proběhla úspěšně!</p>
        <button class="btn btn-success mt-3" @onclick="LastPageStorageService.NavigateToLastPage">Přejít zpět</button>
    }
}

@code
{
    [CascadingParameter]
    protected Task<AuthenticationState> AuthenticationState { get; set; }

    [CascadingParameter]
    protected ProfilePictureProvider? ProfilePictureProvider { get; set; }

    UserPasswordChangeModel userModel;
    bool passwdUpdateSuccess = false;
    bool passwdUpdateFailure = false;

    private async Task PasswordUpdateAsync()
    {
        passwdUpdateFailure = false;
        var response = await Http.PutAsJsonAsync(ApiEndpoints.PasswordChangeUrl, userModel);

        if (response.IsSuccessStatusCode)
        {
            var jsonWebToken = await response.Content.ReadAsStringAsync();
            await LocalStorageService.SetItemAsync(StorageNames.BearerToken, jsonWebToken);

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(StorageNames.Bearer, jsonWebToken);
            passwdUpdateSuccess = true;
            return;
        }
        passwdUpdateFailure = true;
    }

    protected override async Task OnInitializedAsync()
    {
        var identityUser = (await AuthenticationState).User.Identity;

        if (identityUser.IsAuthenticated)
        {
            userModel = new() { UserName = identityUser.Name };
        }
        else
        {
            LastPageStorageService.NavigateToLastPage();
        }
        await base.OnInitializedAsync();
    }
}
