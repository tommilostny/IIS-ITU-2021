@page "/question/{Id:guid}"
@using Fituska.Shared.Models.Answer
@using Fituska.Shared.Models.Question
@using Fituska.Shared.Models.User
@inherits LastPageSavableComponentBase
@inject NavigationManager NavigationManager
@inject HttpClient Http

@if (question is null)
{
    <h3>Načítání...</h3>
}
else
{
    <div class="mb-4">
        <h2>@question.Title</h2>
        <h4>@question.Text</h4>
    </div>
    <p class="text-muted">Vytvořeno uživatelem <a href="/user/@question.User.UserName">@question.User.UserName</a>, @question.CreationTime.</p>
    
    @if (!confirmDelete)
    {
        <ReplyBox OnSubmit="AddAnswer" />
        @if (!answerAddSuccess)
        {
            <p class="text-danger mt-3">Nelze vložit více než jednu odpověď uživatelem <em>@user?.UserName</em>.</p>
        }
    }
    <AuthorizeView>
        <Authorized>
            @if (context.User.Identity.Name == question.User.UserName)
            {
                @if (!confirmDelete)
                {
                    <button class="btn btn-sm btn-outline-danger m-2" @onclick="ToggleDeleteConfirm">Smazat otázku</button> 
                }
                else
                {
                    <div class="card mt-4 mb-3">
                        <div class="card-header">
                            <h4><strong>Opravdu si přejete smazat vaši otázku?</strong></h4>
                        </div>
                        <div class="card-body">
                            <button class="btn btn-danger" @onclick="Delete">Ano</button>
                            <button class="btn btn-secondary" @onclick="ToggleDeleteConfirm">Ne</button>
                        </div>
                    </div>
                }
            }
        </Authorized>
    </AuthorizeView>
    <hr />
    <h5 class="mb-3">@AnswersCount</h5>
    @foreach (var answer in question.Answers.OrderBy(a => a.Votes.Sum(v => (int)v.Vote)).ThenBy(a => a.CreationTime).Reverse())
    {
        <AnswerBox Answer="answer" />
    }
}

@code
{
    [Parameter]
    public Guid Id { get; set; }

    [CascadingParameter]
    protected Task<AuthenticationState> AuthenticationState { get; set; }

    QuestionDetailModel question;

    bool confirmDelete = false;
    bool answerAddSuccess = true;
    UserListModel? user;

    protected override async Task OnInitializedAsync()
    {
        question = await Http.GetFromJsonAsync<QuestionDetailModel>(ApiEndpoints.QuestionIdUrl(Id));     
        await base.OnInitializedAsync();
    }

    async Task AddAnswer(string text)
    {
        user = new UserListModel
        {
            UserName = (await AuthenticationState).User.Identity.Name
        };
        var answer = new AnswerNewModel
        {
            Text = text,
            QuestionId = question.Id,
            UserId = new Guid((await AuthenticationState).User.Claims.First(claim => claim.Type == ClaimTypes.NameIdentifier).Value)
        };
        var response = await Http.PostAsJsonAsync<AnswerNewModel>(ApiEndpoints.AnswerUrl, answer);

        if (answerAddSuccess = response.IsSuccessStatusCode)
        {
            AnswerDetailModel model = await response.Content.ReadFromJsonAsync<AnswerDetailModel>();
            question.Answers.Add(model);
        }
    }

    string AnswersCount => question.Answers.Count.ToString() + question.Answers.Count switch
    {
        1 => " odpověď",
        >= 2 and <= 4  => " odpovědi",
        _ => " odpovědí"
    };

    void ToggleDeleteConfirm() => confirmDelete = !confirmDelete;

    async Task Delete()
    {
        var response  = await Http.DeleteAsync(ApiEndpoints.QuestionIdUrl(question.Id));
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/");
        }
    }
}
