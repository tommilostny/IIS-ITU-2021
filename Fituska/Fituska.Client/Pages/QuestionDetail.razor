@page "/question/{Id:guid}"
@using Fituska.Shared.Models.Answer
@using Fituska.Shared.Models.File
@using Fituska.Shared.Models.Question
@using Fituska.Shared.Models.User
@inherits LastPageSavableComponentBase
@inject NavigationManager NavigationManager
@inject HttpClient Http

@if (question is null)
{
    <h3>Načítání...</h3>
}
else
{
    <div class="mb-4">
        <h2>@question.Title</h2>
        <h4>@question.Text</h4>
    </div>
    <p class="text-muted">
        @UserSawString()
    </p>
    <p class="text-muted">
        Vytvořeno uživatelem <a href="/user/@question.User.UserName">@question.User.UserName</a>, @question.CreationTime.
    
        <AuthorizeView>
            <Authorized>
                @if (false && context.User.Identity.Name == question.User.UserName)
                {
                    @if (!confirmDelete)
                    {
                        <button class="btn btn-sm btn-outline-danger m-2" @onclick="ToggleDeleteConfirm">
                            <span class="oi oi-x me-1" aria-hidden="true"></span> Smazat otázku
                        </button> 
                    }
                    else
                    {
                        <div class="card mt-4 mb-3">
                            <div class="card-header">
                                <h4><strong>Opravdu si přejete smazat vaši otázku?</strong></h4>
                            </div>
                            <div class="card-body">
                                <button class="btn btn-danger" @onclick="Delete">Ano</button>
                                <button class="btn btn-secondary" @onclick="ToggleDeleteConfirm">Ne</button>
                            </div>
                        </div>
                    }
                }
            </Authorized>
        </AuthorizeView>
    </p>

    <FileListBox Files="question.Files" FileGroupAuthorName="@question.User.UserName" ParentId="question.Id" TFileModel="FileQuestionModel" />

    @if (!confirmDelete)
    {
        <ReplyBox OnSubmitWithFiles="AddAnswer" />
        @if (!answerAddSuccess)
        {
            <p class="text-danger mt-3">Nelze vložit více než jednu odpověď uživatelem <em>@userName</em>.</p>
        }
    }

    <hr />
    <h5 class="mb-3">@AnswersCount</h5>
    @foreach (var answer in question.Answers.OrderBy(a => a.Votes.Sum(v => (int)v.Vote)).ThenBy(a => a.CreationTime).Reverse())
    {
        <AnswerBox Answer="answer" />
    }
}

@code
{

    [Parameter]
    public Guid Id { get; set; }

    [CascadingParameter]
    protected Task<AuthenticationState> AuthenticationState { get; set; }

    Guid userId;
    List<UserSawQuestionModel> userSawQuestion = new();
    QuestionDetailModel question;

    int UserSawThisCount()
    {
        if (userSawQuestion is null) return 0;
        return userSawQuestion.Count;
    }
    bool confirmDelete = false;
    bool answerAddSuccess = true;
    string userName;

    protected override async Task OnInitializedAsync()
    {
        question = await Http.GetFromJsonAsync<QuestionDetailModel>(ApiEndpoints.QuestionIdUrl(Id));

        var authUser = (await AuthenticationState).User;
        if (authUser.Identity.IsAuthenticated)
        {
            userName = authUser.Identity.Name;
            userId = new Guid(authUser.Claims.First(claim => claim.Type == ClaimTypes.NameIdentifier).Value);
            var userSawThis = new UserSawQuestionModel
            {
                QuestionId = question.Id,
                UserId = userId
            };
            await Http.PostAsJsonAsync(ApiEndpoints.UserSawQuestionUrl, userSawThis);
        }

        userSawQuestion = await Http.GetFromJsonAsync<List<UserSawQuestionModel>>(ApiEndpoints.UserSawQuestionQuestionIdUrl(question.Id));
        StateHasChanged();
        await base.OnInitializedAsync();
    }

    async Task AddAnswer((string, List<FileAnswerModel>) args)
    {
        var answer = new AnswerNewModel
        {
            Text = args.Item1,
            QuestionId = question.Id,
            UserId = userId
        };
        var response = await Http.PostAsJsonAsync<AnswerNewModel>(ApiEndpoints.AnswerUrl, answer);

        if (answerAddSuccess = response.IsSuccessStatusCode)
        {
            AnswerDetailModel model = await response.Content.ReadFromJsonAsync<AnswerDetailModel>();

            foreach (var file in args.Item2)
            {
                file.AnswerId = model.Id;
                response = await Http.PostAsJsonAsync<FileAnswerModel>(ApiEndpoints.AnswerFileUrl, file);
                if (response.IsSuccessStatusCode)
                {
                    model.Files.Add(await response.Content.ReadFromJsonAsync<FileListModel>());
                }
            }
            question.Answers.Add(model);
        }
    }

    string AnswersCount => question.Answers.Count.ToString() + question.Answers.Count switch
    {
        1 => " odpověď",
        >= 2 and <= 4  => " odpovědi",
        _ => " odpovědí"
    };

    void ToggleDeleteConfirm() => confirmDelete = !confirmDelete;

    async Task Delete()
    {
        var response  = await Http.DeleteAsync(ApiEndpoints.QuestionIdUrl(question.Id));
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private string UserSawString()
    {
        int count = 1;
        if (userSawQuestion is not null)
        {
            count = userSawQuestion.Count;
        }
        if (count == 1) return "Jsi první kdo tuto otázku viděl!";
        if (count >= 2 && count <= 4) return $"Tuto otázku viděli {count} uživatelé";
        else return $"Tuto otázku vidělo {count} uživatelů";
    }
}
