@page "/user/{Username}"
@using Fituska.Shared.Models.Course
@using Fituska.Shared.Models.File
@using Fituska.Shared.Models.User
@inherits LastPageSavableComponentBase
@inject HttpClient Http

@if (userModel is null)
{
    <h1>Načítání...</h1>
}
else
{
    <AuthorizeView>
        <Authorized>
            @if (@context.User.Identity.Name == Username)
            {
                <a class="btn btn-primary" href="/user-edit">Upravit profil</a>
                <a class="btn btn-outline-primary" href="/passwordchange">Změnit heslo</a>
                <a class="btn btn-outline-danger" href="/user/delete">Smazat účet</a>
                <hr />
            }
        </Authorized>
    </AuthorizeView>
    <div class="row">
        <div class="col">
            <h1>@userModel.FirstName @userModel.LastName <small>(@userModel.UserName)</small></h1>
            <p>Naposledy přihlášen: @userModel.LastLoginDate</p>
            <p>Datum registrace: @userModel.RegistrationDate</p>
            <p>E-mail: <a href="@EmailLink">@userModel.Email</a></p>
            @if (!string.IsNullOrEmpty(userModel.DiscordUsername))
            {
                <p>Discord: <a href="@DiscordLink" target="_blank">@userModel.DiscordUsername</a></p>
            }
        </div>
        <div class="col-12 col-sm-5 col-md-3">
            <UserPhotoLoader UserModel="userModel" />
        </div>
    </div>
    @if (lecturingCourses.Count > 0)
    {
        <h4 class="mt-4">Vyučující kurzů:</h4>
        <ul class="list-group">
            @foreach (var course in lecturingCourses)
            {
                <li class="list-group-item">
                    <a href="/course/@course.Url">@course.Shortcut</a>
                </li>
            }
        </ul>
    }
    @if (coursesWatingForModeratorApprove.Count > 0)
    {
        <h4 class="mt-4">Moderátor: kurzy ke schválení:</h4>
        <ul class="list-group">
            @foreach (var course in coursesWatingForModeratorApprove)
            {
                <li class="list-group-item">
                    <button class="btn btn-sm btn-success" @onclick="() => Approve(course.Id)">Schválit</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => Decline(course.Id)">Odmítnout</button>
                    @course.Shortcut
                </li>
            }
        </ul>
    }
}

@code
{
    [CascadingParameter]
    protected Task<AuthenticationState> AuthenticationState { get; set; }

    [Parameter]
    public string Username { get; set; }

    UserDetailModel userModel = null;

    List<CourseListModel> lecturingCourses = new();

    List<CourseListModel> coursesWatingForModeratorApprove = new();

    string EmailLink => $"mailto:{userModel.Email}";

    string DiscordLink => $"https://discordapp.com/users/{userModel.DiscordUsername}/";

    protected override async Task OnInitializedAsync()
    {
        userModel = await Http.GetFromJsonAsync<UserDetailModel>(ApiEndpoints.UserNameUrl(Username));
        lecturingCourses = await Http.GetFromJsonAsync<List<CourseListModel>>(ApiEndpoints.CourseLecrurersUrl(userModel.Id));

        var identityUser = (await AuthenticationState).User;
        if (identityUser.Identity.IsAuthenticated
            && (identityUser.IsInRole(RoleNames.ModeratorRoleName) || identityUser.IsInRole(RoleNames.AdminRoleName)))
        {
            coursesWatingForModeratorApprove = await Http.GetFromJsonAsync<List<CourseListModel>>(ApiEndpoints.CourseModeratorUrl());
        }
        await base.OnInitializedAsync();
    }

    async Task Approve(Guid courseId)
    {
        var response = await Http.GetAsync(ApiEndpoints.CourseModeratorApprovalUrl(courseId));
        RemoveFromApprovalWaitList(response, courseId);
    }

    async Task Decline(Guid courseId)
    {
        var response = await Http.DeleteAsync(ApiEndpoints.CourseIdUrl(courseId));
        RemoveFromApprovalWaitList(response, courseId);
    }

    void RemoveFromApprovalWaitList(HttpResponseMessage response, Guid id)
    {
        if (response.IsSuccessStatusCode)
        {
            coursesWatingForModeratorApprove.Remove(coursesWatingForModeratorApprove.First(c => c.Id == id));
        }
    }
}
