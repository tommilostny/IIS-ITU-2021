@using Fituska.Shared.Models.Answer
@using Fituska.Shared.Models.Comment
@using Fituska.Shared.Models.File
@using Fituska.Shared.Models.User
@using System.Drawing;
@inject HttpClient Http

<div class="card answer-box mb-3" style="background-color: rgba(@backColor.R,@backColor.G,@backColor.B,@backColor.A)">
     <div class="card-body mb-0 pb-0">
        @if (!editingMode)
        {
            <div class="row">
                <div class="col">
                    <h6 class="card-subtitle mb-2 text-muted">
                        <a href="user/@Answer.User?.UserName">@Answer.User?.UserName</a> (@Answer.CreationTime)
                    </h6>
                    <p class="card-text">
                        @Answer.Text
                    </p>

                    @if (Answer.User is not null)
                    {
                        <hr />
                        <FileListBox FileGroupAuthorName="@Answer.User.UserName" Files="Answer.Files" ParentId="Answer.Id" TFileModel="FileAnswerModel" />
                    }
                    <ReplyBox OnSubmit="AddComment" />

                    <AuthorizeView>
                        <Authorized>
                            @if (context.User.Identity.Name == Answer.User?.UserName)
                            {
                                <button class="btn btn-sm btn-outline-secondary" @onclick="ToggleEditingMode">Upravit</button>
                            }
                        </Authorized>
                    </AuthorizeView>
                </div>
                <div class="col-3 col-sm-2 col-md-1">
                     <Voting Votes="Answer.Votes" OnVoteChange="UpdateVote" AnswerId="Answer.Id" /> 
                </div>
            </div>
        }
        else
        {
            <AnswerEditor Answer="Answer" OnSubmit="LoadUpdatedAnswer" />
        }
    </div>
    @if (Answer.Comments is not null && Answer.Comments.Count > 0)
    {
        @foreach (var comment in Answer.Comments.OrderBy(c => c.CreationTime).Reverse())
        {
            <CommentBox Comment="@comment" />
        }
    }
</div>

@code
{
    [Parameter]
    public AnswerDetailModel Answer { get; set; }

    [CascadingParameter]
    protected Task<AuthenticationState> AuthenticationState { get; set; }

    bool editingMode = false;
    Color backColor = new();

    async Task AddComment(string text)
    {
        var comment = new CommentNewModel
        {
            UserId = new Guid((await AuthenticationState).User.Claims.First(claim => claim.Type == ClaimTypes.NameIdentifier).Value),
            Text = text,
            AnswerId = Answer.Id
        };
        var response = await Http.PostAsJsonAsync<CommentNewModel>(ApiEndpoints.CommentUrl, comment);
        if (response.IsSuccessStatusCode)
        {       
            CommentDetailModel detailModel = await response.Content.ReadFromJsonAsync<CommentDetailModel>();
            Answer.Comments.Add(detailModel);
        }
    }

    Color GetColor(int? rating = null)
    {
        if (rating is not null)
            return ColorTints.GetColorFromVotes((int)rating);

        int votes = 0;
        if(Answer.Votes != null)
            votes = Answer.Votes.Sum(v => (int)v.Vote);
        return ColorTints.GetColorFromVotes(votes);
    }

    void UpdateVote(int rating) => backColor = GetColor(rating);

    void ToggleEditingMode() => editingMode = !editingMode;

    void LoadUpdatedAnswer(AnswerDetailModel? model)
    {
        if (model is not null)
        {
            Answer = model;
        }
        ToggleEditingMode();
    }

    protected override async Task OnParametersSetAsync()
    {
        Answer = await Http.GetFromJsonAsync<AnswerDetailModel>(ApiEndpoints.AnswerIdUrl(Answer.Id));
        await base.OnParametersSetAsync();
    }
}
