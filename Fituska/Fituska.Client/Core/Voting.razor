@using Fituska.Shared.Enums
@using Fituska.Shared.Models.User
@using Fituska.Shared.Models.Vote
@using System.Linq;
@inject HttpClient Http

<AuthorizeView>
    <Authorized>
        <div class="voting-container">
            <button @onclick="UpvoteClick" class="btn btn-sm btn-upvote @UpvoteButtonStyle">
                <span class="oi oi-chevron-top" aria-hidden="true"></span>
            </button>
            <p class="rating-text">
                @rating
            </p>
            <button @onclick="DownvoteClick" class="btn btn-sm btn-downvote @DownvoteButtonStyle">
                <span class="oi oi-chevron-bottom" aria-hidden="true"></span>
            </button>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="voting-container">
            <button class="btn btn-sm btn-upvote btn-outline-secondary" disabled>
                <span class="oi oi-chevron-top" aria-hidden="true"></span>
            </button>
            <p class="rating-text">
                @rating
            </p>
            <button class="btn btn-sm btn-downvote btn-outline-secondary" disabled>
                <span class="oi oi-chevron-bottom" aria-hidden="true"></span>
            </button>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code
{

    [Parameter]
    public EventCallback<int> OnVoteChange { get; set; }

    [Parameter]
    public List<VoteModel> Votes { get; set; }

    [Parameter]
    public Guid AnswerId { get; set; }

    [CascadingParameter]
    protected Task<AuthenticationState> AuthenticationState { get; set; }

    void UpdateRating() => rating = Votes.Sum(v => (int)v.Vote);

    int rating;
    Guid userId;
    bool upvoteClicked = false;
    bool downvoteClicked = false;

    string? UpvoteButtonStyle => upvoteClicked ? "btn-success" : "btn-outline-success";

    string? DownvoteButtonStyle => downvoteClicked ? "btn-danger" : "btn-outline-danger";

    async Task UpvoteClick()
    {
        VoteNewModel vote = CreateNewVote(VoteValue.Upvote);
        var response = await Http.PostAsJsonAsync<VoteNewModel>(ApiEndpoints.VoteUrl, vote);
        if (!response.IsSuccessStatusCode || response.Content == null) return;
        VoteModel newVote = await response.Content.ReadFromJsonAsync<VoteModel>();
        if (newVote == null) return;

        VoteModel oldVote = oldVote = Votes.FirstOrDefault(vote => vote.UserId == userId);
        downvoteClicked = false;
        if (oldVote is not null)
        {          
            Votes.Remove(oldVote);
        }
        Votes.Add(newVote);
        ChangeBoolsOnVote(newVote.Vote);
        UpdateRating();
        StateHasChanged();
        await OnVoteChange.InvokeAsync(rating);
    }

    async Task DownvoteClick()
    {
        VoteNewModel vote = CreateNewVote(VoteValue.Downvote);
        var response = await Http.PostAsJsonAsync<VoteNewModel>(ApiEndpoints.VoteUrl, vote);
        if (!response.IsSuccessStatusCode || response.Content == null) return;
        VoteModel newVote = await response.Content.ReadFromJsonAsync<VoteModel>();
        if (newVote == null) return;
        VoteModel oldVote = Votes.FirstOrDefault(vote => vote.UserId == userId);
        if (oldVote is not null)
        {          
            Votes.Remove(oldVote);
        }
        Votes.Add(newVote);
        ChangeBoolsOnVote(newVote.Vote);
        UpdateRating();
        StateHasChanged();
        await OnVoteChange.InvokeAsync(rating);
    }

    protected override async Task OnInitializedAsync()
    {
        userId = await GetUserInfo.GetUserId(AuthenticationState);
        Votes = await Http.GetFromJsonAsync<List<VoteModel>>(ApiEndpoints.VoteAnswerIdUrl(AnswerId));
        var identityUser = (await AuthenticationState)?.User?.Identity;
        if (identityUser.IsAuthenticated)
        {
            var vote = Votes.FirstOrDefault(vote => vote.UserId == userId);
            if(vote is not null)
            {
                Console.WriteLine($"Init vote value is {vote.Vote}");
                if (vote.Vote == VoteValue.Upvote) upvoteClicked = true;
                if (vote.Vote == VoteValue.Downvote) downvoteClicked = true;
            }
        }
        UpdateRating();
        Console.WriteLine($"Rating is: {rating}.");
        StateHasChanged();
        await OnVoteChange.InvokeAsync(rating);
        await base.OnInitializedAsync();
    }

    private VoteNewModel CreateNewVote(VoteValue voteValue)
    {
        VoteNewModel vote = new VoteNewModel
        {
            Vote = voteValue,
            AnswerId = AnswerId,
            UserId = userId
        };
        return vote;
    }

    private void ChangeBoolsOnVote(VoteValue vote)
    {
        upvoteClicked = false;
        downvoteClicked = false;
        if(vote == VoteValue.Upvote)
        {
            upvoteClicked = true;
        }
        if(vote == VoteValue.Downvote)
        {
            downvoteClicked = true;
        }
    }
}
