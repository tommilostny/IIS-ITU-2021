@using Fituska.Shared.Enums
@using Fituska.Shared.Models.User
@using Fituska.Shared.Models.Vote
@using System.Linq;
@inject HttpClient Http

<AuthorizeView>
    <Authorized>
        <div class="voting-container">
            <button @onclick="UpvoteClick" class="btn btn-sm btn-upvote @UpvoteButtonStyle">
                <span class="oi oi-chevron-top" aria-hidden="true"></span>
            </button>
            <p class="rating-text">
                @Rating
            </p>
            <button @onclick="DownvoteClick" class="btn btn-sm btn-downvote @DownvoteButtonStyle">
                <span class="oi oi-chevron-bottom" aria-hidden="true"></span>
            </button>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="voting-container">
            <button class="btn btn-sm btn-upvote btn-outline-secondary" disabled>
                <span class="oi oi-chevron-top" aria-hidden="true"></span>
            </button>
            <p class="rating-text">
                @Rating
            </p>
            <button class="btn btn-sm btn-downvote btn-outline-secondary" disabled>
                <span class="oi oi-chevron-bottom" aria-hidden="true"></span>
            </button>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code
{
    [Parameter]
    public EventCallback<int> OnVoteChange { get; set; }

    [Parameter]
    public List<VoteModel> Votes { get; set; }

    [Parameter]
    public Guid AnswerId { get; set; }

    [CascadingParameter]
    protected Task<AuthenticationState> AuthenticationState { get; set; }

    public int Rating => Votes.Sum(v => (int)v.Vote);

    Guid userId;
    bool upvoteClicked = false;
    bool downvoteClicked = false;

    string? UpvoteButtonStyle => upvoteClicked ? "btn-success" : "btn-outline-success";

    string? DownvoteButtonStyle => downvoteClicked ? "btn-danger" : "btn-outline-danger";

    async Task UpvoteClick()
    {
        VoteNewModel vote = (await CreateNewVote(VoteValue.Upvote));
        var response = await Http.PostAsJsonAsync<VoteNewModel>(ApiEndpoints.VoteUrl,vote);
        if (response.IsSuccessStatusCode)
        {
            if (response.Content == null) return;
            VoteModel newVote = await response.Content.ReadFromJsonAsync<VoteModel>();
            if (newVote == null) return;

            VoteModel oldVote = oldVote = Votes.FirstOrDefault(vote => vote.UserId == userId);
            downvoteClicked = false;
            if (oldVote is not null)
            {
                Console.WriteLine($"Already voted, changing vote from {oldVote.ToString()} to {newVote.ToString()}");
                upvoteClicked = false;
                Votes.Remove(oldVote);
                if (oldVote.Vote != newVote.Vote)
                {
                    upvoteClicked = true;
                    Votes.Add(newVote);
                }
            }
            else
            {
                upvoteClicked = true;
                Votes.Add(newVote);
            }

        }
        await OnVoteChange.InvokeAsync();
    }

    async Task DownvoteClick()
    {
        VoteNewModel vote = (await CreateNewVote(VoteValue.Downvote));
        var response = await Http.PostAsJsonAsync<VoteNewModel>(ApiEndpoints.VoteUrl,vote);
        if (response.IsSuccessStatusCode)
        {
            if (response.Content == null) return;
            VoteModel newVote = await response.Content.ReadFromJsonAsync<VoteModel>();
            if (newVote == null) return;
            VoteModel oldVote = Votes.FirstOrDefault(vote => vote.UserId == userId);
            if (oldVote is not null)
            {
                Console.WriteLine($"Already voted, changing vote from {oldVote.Vote.ToString()} to {newVote.Vote.ToString()}");
                upvoteClicked = false;
                downvoteClicked = false;
                Votes.Remove(oldVote);
                if (oldVote.Vote != newVote.Vote)
                {
                    downvoteClicked = true;
                    Votes.Add(newVote);
                }
            }
            else
            {
                upvoteClicked = false;
                downvoteClicked = true;
                Votes.Add(newVote);
            }

        }
        await OnVoteChange.InvokeAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        userId = new Guid((await AuthenticationState).User.Claims.First(claim => claim.Type == ClaimTypes.NameIdentifier).Value);
        Votes = await Http.GetFromJsonAsync<List<VoteModel>>(ApiEndpoints.VoteAnswerIdUrl(AnswerId));
        var identityUser = (await AuthenticationState).User.Identity;
        if (identityUser.IsAuthenticated)
        {
            var vote = Votes.FirstOrDefault(vote => vote.UserId == userId);
            if(vote is not null)
            {
                Console.WriteLine($"Init vote value is {vote.Vote}");
                if (vote.Vote == VoteValue.Upvote) upvoteClicked = true;
                if (vote.Vote == VoteValue.Downvote) downvoteClicked = true;
            }
        }
        Console.WriteLine("Rating is: " + Rating);
        StateHasChanged();
        await OnVoteChange.InvokeAsync();
        await base.OnInitializedAsync();
    }

    private async Task<VoteNewModel> CreateNewVote(VoteValue voteValue)
    {
        VoteNewModel vote = new VoteNewModel
        {
                Vote = voteValue,
                AnswerId = AnswerId,
                UserId = new Guid((await AuthenticationState).User.Claims.First(claim => claim.Type == ClaimTypes.NameIdentifier).Value)

        };
        return vote;
    }
}
