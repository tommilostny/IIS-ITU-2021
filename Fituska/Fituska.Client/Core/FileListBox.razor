@using Fituska.Shared.Models.File
@typeparam TFileModel where TFileModel : FileModelBase, new()
@implements IAsyncDisposable
@inject HttpClient Http
@inject IJSRuntime JS

@if (Files.Count > 0)
{
    <h6 class="mt-3">Přiložené soubory:</h6>
    <ul class="list-group mb-4">
        @foreach (var file in Files)
        {
            <li class="list-group-item">
                <button @onclick="async () => await DownloadFile(file.Id)" class="btn btn-sm btn-success">
                    <span class="oi oi-data-transfer-download me-1" aria-hidden="true"></span> Stáhnout
                </button>

                <AuthorizeView>
                    <Authorized>
                        @if (context.User.Identity.Name == FileGroupAuthorName)
                        {
                            <button @onclick="async () => await DeleteFile(file)" class="btn btn-sm btn-outline-danger me-2">
                                <span class="oi oi-x me-1" aria-hidden="true"></span> Smazat
                            </button>
                        }
                    </Authorized>
                </AuthorizeView>

                <strong>
                    @file.Name
                </strong>
            </li>
        }
    </ul>
    <hr />
}
<AuthorizeView>
    <Authorized>
        @if (context.User.Identity.Name == FileGroupAuthorName)
        {
            <h6>Přidat soubory:</h6>
            <FileLoader TFileModel="TFileModel" ParentId="ParentId" OnChange="AddFiles" />
            <br />
            <button class="btn btn-sm btn-primary mt-2" @onclick="UploadFiles" disabled="@(filesToUpload.Count == 0)">
                <span class="oi oi-data-transfer-upload me-1" aria-hidden="true"></span> Odeslat
            </button>
            <hr />
        }
    </Authorized>
</AuthorizeView>

@code
{
    [Parameter]
    public ICollection<FileListModel> Files { get; set; }

    [Parameter]
    public string FileGroupAuthorName { get; set; }

    [Parameter]
    public Guid ParentId { get; set; }

    IJSObjectReference? javascriptModule;
    List<TFileModel> filesToUpload = new List<TFileModel>();

    async Task DeleteFile(FileListModel file)
    {
        await Http.DeleteAsync(ApiEndpoints.FileIdUrl(file.Id));
        Files.Remove(file);
    }

    async Task DownloadFile(Guid fileId)
    {
        if (javascriptModule is null)
            return;

        var fileModel = await Http.GetFromJsonAsync<FileModelBase>(ApiEndpoints.FileIdUrl(fileId));

        var fileStream = new MemoryStream(fileModel.Content);
        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await javascriptModule.InvokeVoidAsync("downloadFileFromStream", fileModel.Name, streamRef);
    }

    protected override async Task OnInitializedAsync()
    {
        javascriptModule = await JS.InvokeAsync<IJSObjectReference>("import", "/download.js");
        await base.OnInitializedAsync();
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (javascriptModule is not null)
            await javascriptModule.DisposeAsync();
    }

    void AddFiles(IEnumerable<TFileModel> files)
    {
        filesToUpload = files.ToList();
    }

    async Task UploadFiles()
    {
        string? endpointUrl = filesToUpload.FirstOrDefault() switch
        {
            FileQuestionModel _ => ApiEndpoints.QuestionFileUrl,
            FileAnswerModel _ => ApiEndpoints.AnswerFileUrl,
            _ => null
        };
        if (endpointUrl is null)
            return;

        foreach (var file in filesToUpload)
        {
            var response = await Http.PostAsJsonAsync<TFileModel>(endpointUrl, file);
            if (response.IsSuccessStatusCode)
            {
                Files.Add(await response.Content.ReadFromJsonAsync<FileListModel>());
            }
        }
        filesToUpload.Clear();
    }
}
