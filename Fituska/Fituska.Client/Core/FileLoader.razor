@using Fituska.Shared.Models.File
@typeparam TFileModel where TFileModel : FileModelBase, new()

@if (loading)
{
    <p><strong>Načítání...</strong></p>
}
<InputFile OnChange="OnInputFileChange" multiple="@(!fileModel.ImageOnly())" />

@code
{
    [Parameter]
    public Guid ParentId { get; set; } = Guid.Empty;

    [Parameter]
    public EventCallback<IEnumerable<TFileModel>> OnChange { get; set; }

    TFileModel fileModel = new();

    bool loading = false;

    async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        loading = true;

        if (ParentId != Guid.Empty)
        {
            switch (fileModel) //Set File parent Id based on meant parent type.
            {
                case FileAnswerModel fileAnswerModel:
                    fileAnswerModel.AnswerId = ParentId;
                    break;
                case FileQuestionModel fileQuestionModel:
                    fileQuestionModel.QuestionId = ParentId;
                    break;
            }
        }
        //Read file and send byte[] content via OnChange, sending to endpoint by component parent.
        if (fileModel.ImageOnly())
            await ReadImageFile(e.File);
        else
            await ReadMultipleFiles(e.GetMultipleFiles());

        loading = false;
    }

    async Task ReadImageFile(IBrowserFile browserFile)
    {
        if (!browserFile.ContentType.StartsWith("image/"))
            return;

        var imageFile = await browserFile.RequestImageFileAsync(browserFile.ContentType, 512, 512);
        using var stream = new StreamContent(imageFile.OpenReadStream(imageFile.Size));

        fileModel.Name = imageFile.Name;
        fileModel.Content = await stream.ReadAsByteArrayAsync();

        await OnChange.InvokeAsync(new List<TFileModel> { fileModel });
    }

    async Task ReadMultipleFiles(IEnumerable<IBrowserFile> browserFiles)
    {
        var files = new List<TFileModel>();

        foreach (var file in browserFiles)
        {
            using var stream = new StreamContent(file.OpenReadStream());
            var newFile = fileModel with
            {
                Name = file.Name,
                Content = await stream.ReadAsByteArrayAsync()
            };
            files.Add(newFile);
        }
        await OnChange.InvokeAsync(files);
    }
}
