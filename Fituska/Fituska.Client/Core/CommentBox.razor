@using Fituska.Shared.Models.Comment
@using Fituska.Shared.Models.User
@inject HttpClient Http
<div class="card m-2 ms-4">
    <div class="card-body">
        <h6 class="card-subtitle mb-2 text-muted"><a href="user/@Comment.User.UserName">@Comment.User.UserName</a> (@Comment.CreationTime)</h6>
        <p class="card-text">@Comment.Text</p>
        <ReplyBox OnSubmit="AddComment" />
    </div>
    @foreach (var comment in Comment.SubComments.OrderBy(c => c.CreationTime).Reverse())
    {
        <CommentBox Comment="@comment" />
    }
</div>

@code
{
    [Parameter]
    public CommentDetailModel Comment { get; set; }

    [CascadingParameter]
    protected Task<AuthenticationState> AuthenticationState { get; set; }

    async Task AddComment(string text)
    {
        var user = new UserListModel { UserName = (await AuthenticationState).User.Identity.Name, Photo = null };
        var comment = new CommentNewModel 
        { UserId = new Guid((await AuthenticationState).User.Claims.First(claim => claim.Type == ClaimTypes.NameIdentifier).Value), 
            Text = text
        };
        var response = await Http.PostAsJsonAsync<CommentNewModel>(ApiEndpoints.CommentUrl,comment);
        if (response.IsSuccessStatusCode)
        {       
            CommentDetailModel detailModel = await response.Content.ReadFromJsonAsync<CommentDetailModel>();
            Comment.SubComments.Add(detailModel);
        }     
    }

    protected override async Task OnInitializedAsync()
    {
        Comment = await Http.GetFromJsonAsync<CommentDetailModel>(ApiEndpoints.CommentIdUrl(Comment.Id));      
        await base.OnInitializedAsync();
    }
}
