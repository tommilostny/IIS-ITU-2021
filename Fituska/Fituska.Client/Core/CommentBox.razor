@using Fituska.Shared.Models.Comment
@using Fituska.Shared.Models.User
@inject HttpClient Http
<div class="card m-2 ms-4">
    <div class="card-body">
        <h6 class="card-subtitle mb-2 text-muted"><a href="user/@Comment?.User?.UserName">@Comment?.User?.UserName</a> (@Comment?.CreationTime)</h6>
        <p class="card-text">@Comment?.Text</p>
        <ReplyBox OnSubmit="AddComment" />
    </div>
    @if (Comment.SubComments is not null && Comment.SubComments.Count > 0)
    {
        @foreach (var comment in Comment.SubComments.OrderBy(c => c.CreationTime).Reverse())
        {
            <CommentBox Comment="@comment" />
        }
    }
</div>

@code
{
    [Parameter]
    public CommentDetailModel Comment { get; set; }

    [CascadingParameter]
    protected Task<AuthenticationState> AuthenticationState { get; set; }

    private Guid userId { get; set; }
    async Task AddComment(string text)
    {
        var comment = new CommentNewModel
            {
                UserId = userId,
                ParentCommentId = Comment.Id,
                Text = text
            };
        var response = await Http.PostAsJsonAsync<CommentNewModel>(ApiEndpoints.CommentUrl,comment);
        if (response.IsSuccessStatusCode)
        {       
            CommentDetailModel detailModel = await response.Content.ReadFromJsonAsync<CommentDetailModel>();
            Comment.SubComments.Add(detailModel);
        }     
    }

    protected override async Task OnInitializedAsync()
    {
        Comment = await Http.GetFromJsonAsync<CommentDetailModel>(ApiEndpoints.CommentIdUrl(Comment.Id));
        userId = await GetUserInfo.GetUserId(AuthenticationState);
        StateHasChanged();
        await base.OnInitializedAsync();
    }
}
